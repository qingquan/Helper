package yl.demo.pathHelper.algrorithm;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import yl.demo.pathHelper.model.Location;

public class IndoorLocationAlgorithm {
	private HashMap<Location, HashMap<String, Double>> mFingerPrintingHashMap;
	private HashMap<String, Set<String>> mMacHashMap;
	private String mPath;
	private String mCurrentFileName = "";
	
	
	public IndoorLocationAlgorithm(String dataPath) {
		// TODO Auto-generated constructor stub
		mPath = dataPath;
		mFingerPrintingHashMap = new HashMap<Location, HashMap<String,Double>>();
		createMacHashMap();
	}
	
	/**
	 * 创建mac和地图的映射表。用于通过mac确定属于哪个地图
	 */
	private void createMacHashMap() {
		// TODO Auto-generated method stub
		mMacHashMap = new HashMap<String, Set<String>>();
		File directory = new File(mPath);
		if (directory.isDirectory()) {
			String[] fileNames = directory.list();
			for (String string : fileNames) {
				File file = new File(mPath + string);
				if ( file.exists() ) {
					addMacToMacHashMap(file);
				}
			}
		}
	}

	/**
	 * 将文件中的mac信息加入到MacHashMap中
	 * @param file
	 */
	private void addMacToMacHashMap(File file) {
		// TODO Auto-generated method stub
		String fileName = file.getName();
		String line = null;
		try {
			BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
			while ( ( line = bufferedReader.readLine()) != null ) {
				String[] sections = line.split(" ");
				for (String string : sections) {
					if (string.indexOf(":") != -1) {
						String mac = string.substring(0, string.indexOf(":"));
						if ( mMacHashMap.containsKey(mac) && mMacHashMap.get(mac).contains(fileName) )
							continue;
						if ( !mMacHashMap.containsKey(mac) )
							mMacHashMap.put(mac, new HashSet<String>() );
						if ( !mMacHashMap.get(mac).contains(file) ) 
							mMacHashMap.get(mac).add(fileName);
					}		
				}
			}
			bufferedReader.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * 将特定地图的Fingerprinting数据加载到内存
	 * @param fileName
	 */
	public void loadFingerPrintingData(String fileName) {
		mFingerPrintingHashMap.clear();
		File file = new File(mPath+fileName);
		int floorId, buildingId;
		String line = null;
		try {
			BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
			line = bufferedReader.readLine();
			String[] fragments = line.split(" ");
			buildingId = Integer.parseInt(fragments[0]);
			floorId = Integer.parseInt(fragments[1]);
			while ( ( line = bufferedReader.readLine() ) != null ) {
				String[] sections = line.split(" ");
				int middle = sections[0].indexOf(",");
				float x = Float.parseFloat(sections[0].substring(0,middle));
				float y = Float.parseFloat(sections[0].substring(middle+1));
				Location location = new Location(buildingId, floorId, x, y);
				HashMap<String, Double> hashMap = new HashMap<String, Double>();
				
				for ( int i = 1; i < sections.length; i++ ) {
					int mark = sections[i].indexOf(":");
					String mac = sections[i].substring(0, mark);
					double rss = Double.parseDouble(sections[i].substring(mark+1));
					rss = Math.pow(10, rss/10);
					hashMap.put(mac, rss);
				}
				mFingerPrintingHashMap.put(location, hashMap);
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	/**
	 * 通过rssVec进行定位，返回楼层信息和详细位置的Location
	 * @param rssVec 其中的信号强度为power，而非dbm
	 * @return
	 */
	public Location predictLocation(HashMap<String, Double> rssVec) {
		String fileName = predictFingerPrintingFile(rssVec);
		if ( !fileName.equals(mCurrentFileName) ) {
			mCurrentFileName = fileName;
			loadFingerPrintingData(mCurrentFileName);
		}
		List<EstimatedLocation> locations = new ArrayList<EstimatedLocation>();
		
		Iterator iterator = mFingerPrintingHashMap.entrySet().iterator();
		
		while ( iterator.hasNext() ) {
			Map.Entry<Location, HashMap<String, Double>> entry = (Map.Entry<Location, HashMap<String, Double>>)iterator.next();
			double estimate = cosineEstimate(entry.getValue(), rssVec);
			locations.add(new EstimatedLocation(estimate, entry.getKey()));
		}
		
		Collections.sort(locations);
		
		return finalSelection(locations.subList(locations.size()-10, locations.size()));
	}
	
	private Location finalSelection(List<EstimatedLocation> subList) {
		// TODO Auto-generated method stub
		double mean = calculateMeanValue(subList);
		double std = calculateStdValue(subList, mean);
		double threshold = mean + 0.55 * std;
		List<EstimatedLocation> locations = calculateRequireList(subList, threshold);
		float solu = 0;
		float x = 0,y = 0;
		int floorId = subList.get(0).location.floorId;
		int buildingId = subList.get(0).location.buildingId;
		for (EstimatedLocation estimatedLocation : locations) {
			solu += estimatedLocation.estimate;
		}
		
		for (EstimatedLocation estimatedLocation : locations) {
			x += estimatedLocation.estimate / solu * estimatedLocation.location.x;
			y += estimatedLocation.estimate / solu * estimatedLocation.location.y;
		}
		return new Location(buildingId, floorId, x, y);
	}

	private List<EstimatedLocation> calculateRequireList(List<EstimatedLocation> subList, double threshold) {
		// TODO Auto-generated method stub
		for (EstimatedLocation estimatedLocation : subList) {
			if ( estimatedLocation.estimate < threshold )
				subList.remove(estimatedLocation);
		}
		return subList;
	}

	private double calculateStdValue(List<EstimatedLocation> subList, double meanValue) {
		// TODO Auto-generated method stub
		double solu = 0;
		for (EstimatedLocation estimatedLocation : subList) {
			solu = Math.pow(estimatedLocation.estimate-meanValue, 2);
		}
		
		return Math.sqrt(solu / subList.size());
	}

	private double calculateMeanValue(List<EstimatedLocation> subList) {
		// TODO Auto-generated method stub
		double solu = 0;
		for (EstimatedLocation estimatedLocation : subList) {
			solu += estimatedLocation.estimate;
		}
		return solu / subList.size();
	}

	/**
	 * 初步判断属于哪张地图，然后返回地图所属的Fingerprinting文件名
	 * @param rssVec
	 * @return
	 */
	private String predictFingerPrintingFile(HashMap<String, Double> rssVec) {
		HashMap<String, Integer> mapCountHashMap = new HashMap<String, Integer>();
		Iterator iterator = rssVec.entrySet().iterator();
		while ( iterator.hasNext() ) {
			Map.Entry<String, Double> entry = (Map.Entry<String, Double>)iterator.next();
			String mac = entry.getKey();
			Set<String> set = mMacHashMap.get(mac);
			if ( set == null )
				continue;
			Iterator setIterator = set.iterator();
			for ( ;setIterator.hasNext(); ) {
				String fileName = (String)setIterator.next();
				if ( !mapCountHashMap.containsKey(fileName) )
					mapCountHashMap.put(fileName, 1);
				else 
					mapCountHashMap.put(fileName, mapCountHashMap.get(fileName)+1);
			}
		}
		
		iterator = mapCountHashMap.entrySet().iterator();
		String fileName = null;
		int max = -1;
		while ( iterator.hasNext() ) {
			Map.Entry<String, Integer> entry = (Map.Entry<String, Integer>)iterator.next();
			int count = entry.getValue();
			if ( count > max ) {
				max = count;
				fileName = (String)entry.getKey();
			}
		}
		//return fileName;
		return "hex_pm_ref.txt";
	}
	
	private double cosineEstimate(HashMap<String, Double> sampleHashMap, HashMap<String, Double> testHashMap) {
		double estimate = 0;
		double sampleNorm = 0;
		double testNorm = 0;
		Set<String> set = new HashSet<String>();
		set.addAll(sampleHashMap.keySet());
		set.addAll(testHashMap.keySet());
		double[] samples = new double[set.size()];
		double[] test = new double[set.size()];
		int i = 0;
		for (String string : set) {
			samples[i] = sampleHashMap.containsKey(string) ? sampleHashMap.get(string) : 0;
			test[i] = testHashMap.containsKey(string) ? testHashMap.get(string) : 0;
			i++;
		}
		
		for (i = 0; i < test.length; i++) {
			estimate += samples[i] * test[i];
			sampleNorm += samples[i] * samples[i];
			testNorm += test[i] * test[i];
		}
		
		return estimate / Math.sqrt(sampleNorm) / Math.sqrt(testNorm);
	}
	
	public class EstimatedLocation implements Comparable<EstimatedLocation> {
		public double estimate;
		public Location location;
		public EstimatedLocation(double estimate, Location location) {
			// TODO Auto-generated constructor stub
			this.estimate = estimate;
			this.location = location;
		}
		@Override
		public int compareTo(EstimatedLocation another) {
			// TODO Auto-generated method stub
			EstimatedLocation estimatedLocation = (EstimatedLocation)another;
			return estimate - estimatedLocation.estimate > 0 ? 1 : -1;
		}
	
	};

}
